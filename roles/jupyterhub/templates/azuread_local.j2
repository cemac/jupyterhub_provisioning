"""
A JupyterHub authenticator class for use with Azure AD as an identity provider.
"""

import grp
import os
import pwd

import jwt
from jupyterhub.handlers import LogoutHandler
from jupyterhub.auth import LocalAuthenticator
from jupyterhub.utils import url_path_join
from traitlets import Unicode, default

from .oauth2 import OAuthenticator

class AzureAdLogoutHandler(LogoutHandler):
    async def get(self):
        if self.authenticator.logout_redirect_url:
            user_info = self.current_user
            await self.default_handle_logout()
            await self.handle_logout()
            if user_info:
                self.redirect(self.authenticator.logout_redirect_url)
            else:
                await super().get()
        else:
            await super().get()

class AzureAdOAuthenticator(OAuthenticator):
    user_auth_state_key = "user"
    logout_handler = AzureAdLogoutHandler
    logout_redirect_url = Unicode(help="""URL for logging out.""").tag(config=True)
    post_logout_redirect_uri = Unicode(config=True)

    @default("login_service")
    def _login_service_default(self):
        return os.environ.get("LOGIN_SERVICE", "Azure AD")

    @default("username_claim")
    def _username_claim_default(self):
        return "name"

    user_groups_claim = Unicode(
        "",
        config=True,
        help="""
        .. deprecated:: 17.0

            Use :attr:`auth_state_groups_key` instead.
        """,
    )

    @default('auth_state_groups_key')
    def _auth_state_groups_key_default(self):
        key = "user.groups"
        if self.user_groups_claim:
            key = f"{self.user_auth_state_key}.{self.user_groups_claim}"
            cls = self.__class__.__name__
            self.log.warning(
                f"{cls}.user_groups_claim is deprecated in OAuthenticator 17. Use {cls}.auth_state_groups_key = {key!r}"
            )
        return key

    tenant_id = Unicode(
        config=True,
        help="""
        An Azure tenant ID for which an OAuth application is registered via
        `client_id` and `client_secret`.

        This is used to set the default values of `authorize_url` and
        `token_url`.
        """,
    )

    @default('tenant_id')
    def _tenant_id_default(self):
        return os.environ.get('AAD_TENANT_ID', '')

    @default("authorize_url")
    def _authorize_url_default(self):
        return f"https://login.microsoftonline.com/{self.tenant_id}/oauth2/authorize"

    @default("token_url")
    def _token_url_default(self):
        return f"https://login.microsoftonline.com/{self.tenant_id}/oauth2/token"

    async def token_to_user(self, token_info):
        id_token = token_info['id_token']
        decoded = jwt.decode(
            id_token,
            options={"verify_signature": False},
            audience=self.client_id,
        )

        # get username from upn:
        upn = decoded['upn']
        [username, domain] = upn.split('@')
        if domain == '{{ jupyterhub_users_domain }}':
            decoded["name"] = username
        else:
            decoded["name"] = 'nobody'

        # add groups to userdict:
        try:
            user_pwd = pwd.getpwnam(username)
            user_groups = os.getgrouplist(
                user_pwd.pw_name, user_pwd.pw_gid
            )
            groups = [
                grp.getgrgid(i).gr_name for i in user_groups
            ]
        except KeyError:
            decoded["name"] = 'nobody'
            groups = []
        decoded["groups"] = groups

        return decoded

    @default("logout_redirect_url")
    def _logout_redirect_url_default(self):
        if self.post_logout_redirect_uri:
            url = 'https://login.microsoftonline.com/{0}/oauth2/logout?post_logout_redirect_uri={1}'
        else:
            url = 'https://login.microsoftonline.com/{0}/oauth2/logout'
        return url.format(self.tenant_id, self.post_logout_redirect_uri)

    @default('post_logout_redirect_uri')
    def _post_logout_redirect_uri_default(self):
        return ''

    def logout_url(self, base_url):
        return url_path_join(base_url, 'logout')

    def get_handlers(self, app):
        return super().get_handlers(app) + [(r'/logout', self.logout_handler)]

class LocalAzureAdOAuthenticator(LocalAuthenticator, AzureAdOAuthenticator):
    """A version that mixes in local system user creation"""
