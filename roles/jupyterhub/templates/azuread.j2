"""
Custom Authenticator to use Azure AD with JupyterHub
"""

import json
import jwt
import os
import urllib

from tornado.auth import OAuth2Mixin
from tornado.log import app_log
from tornado.httpclient import HTTPRequest, AsyncHTTPClient

from jupyterhub.handlers import LogoutHandler
from jupyterhub.auth import LocalAuthenticator
from jupyterhub.utils import url_path_join

from traitlets import Unicode, default

from .oauth2 import OAuthLoginHandler, OAuthenticator

class AzureAdLogoutHandler(LogoutHandler):
    async def get(self):
        if self.authenticator.logout_redirect_url:
            user_info = self.current_user
            await self.default_handle_logout()
            await self.handle_logout()
            if user_info:
                self.redirect(self.authenticator.logout_redirect_url)
            else:
                await super().get()
        else:
            await super().get()

class AzureAdOAuthenticator(OAuthenticator):
    login_service = Unicode(
        os.environ.get('LOGIN_SERVICE', 'Azure AD'),
        config=True,
        help="""Azure AD domain name string, e.g. My College"""
    )
    tenant_id = Unicode(config=True, help="The Azure Active Directory Tenant ID")
    username_claim = Unicode(config=True)
    logout_handler = AzureAdLogoutHandler
    logout_redirect_url = Unicode(help="""URL for logging out.""").tag(config=True)
    post_logout_redirect_uri = Unicode(config=True)

    @default('tenant_id')
    def _tenant_id_default(self):
        return os.environ.get('AAD_TENANT_ID', '')

    @default('username_claim')
    def _username_claim_default(self):
        return 'name'

    @default("authorize_url")
    def _authorize_url_default(self):
        return 'https://login.microsoftonline.com/{0}/oauth2/authorize'.format(self.tenant_id)

    @default("token_url")
    def _token_url_default(self):
        return 'https://login.microsoftonline.com/{0}/oauth2/token'.format(self.tenant_id)

    async def authenticate(self, handler, data=None):
        code = handler.get_argument("code")
        http_client = AsyncHTTPClient()

        params = dict(
            client_id=self.client_id,
            client_secret=self.client_secret,
            grant_type='authorization_code',
            code=code,
            redirect_uri=self.get_callback_url(handler))

        data = urllib.parse.urlencode(
            params, doseq=True, encoding='utf-8', safe='=')

        url = self.token_url

        headers = {
            'Content-Type':
            'application/x-www-form-urlencoded; charset=UTF-8'
        }
        req = HTTPRequest(
            url,
            method="POST",
            headers=headers,
            body=data  # Body is required for a POST...
        )

        resp = await http_client.fetch(req)
        resp_json = json.loads(resp.body.decode('utf8', 'replace'))

        # app_log.info("Response %s", resp_json)
        access_token = resp_json['access_token']

        id_token = resp_json['id_token']
        decoded = jwt.decode(id_token, verify=False)

        upn = decoded['upn']
        [username, domain] = upn.split('@')
        if domain == '{{ jupyterhub_users_domain }}':
            userdict = {"name": username}
        else:
            userdict = {"name": upn}
        userdict["auth_state"] = auth_state = {}
        auth_state['access_token'] = access_token
        # results in a decoded JWT for the user data
        auth_state['user'] = decoded

        return userdict

    @default("logout_redirect_url")
    def _logout_redirect_url_default(self):
        if self.post_logout_redirect_uri:
            url = 'https://login.microsoftonline.com/{0}/oauth2/logout?post_logout_redirect_uri={1}'
        else:  
            url = 'https://login.microsoftonline.com/{0}/oauth2/logout'
        return url.format(self.tenant_id, self.post_logout_redirect_uri)

    @default('post_logout_redirect_uri')
    def _post_logout_redirect_uri_default(self):
        return ''

    def logout_url(self, base_url):
        return url_path_join(base_url, 'logout')

    def get_handlers(self, app):
        return super().get_handlers(app) + [(r'/logout', self.logout_handler)]

class LocalAzureAdOAuthenticator(LocalAuthenticator, AzureAdOAuthenticator):
    """A version that mixes in local system user creation"""
    pass
